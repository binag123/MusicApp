{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nvar _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\MusicAppReact\\\\node_modules\\\\@react-navigation\\\\native\\\\dist\\\\ResourceSavingSceneView.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { SceneView } from '@react-navigation/core';\nvar FAR_FAR_AWAY = 3000;\n\nvar ResourceSavingSceneView = function (_React$PureComponent) {\n  _inherits(ResourceSavingSceneView, _React$PureComponent);\n\n  var _super = _createSuper(ResourceSavingSceneView);\n\n  function ResourceSavingSceneView(props) {\n    var _this;\n\n    _classCallCheck(this, ResourceSavingSceneView);\n\n    _this = _super.call(this);\n\n    _this._mustAlwaysBeVisible = function () {\n      return _this.props.animationEnabled || _this.props.swipeEnabled;\n    };\n\n    _this.state = {\n      awake: props.lazy ? props.isFocused : true\n    };\n    return _this;\n  }\n\n  _createClass(ResourceSavingSceneView, [{\n    key: \"render\",\n    value: function render() {\n      var awake = this.state.awake;\n\n      var _this$props = this.props,\n          isFocused = _this$props.isFocused,\n          childNavigation = _this$props.childNavigation,\n          removeClippedSubviews = _this$props.removeClippedSubviews,\n          rest = _objectWithoutProperties(_this$props, [\"isFocused\", \"childNavigation\", \"removeClippedSubviews\"]);\n\n      return React.createElement(View, {\n        style: styles.container,\n        collapsable: false,\n        removeClippedSubviews: Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 12\n        }\n      }, React.createElement(View, {\n        style: this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }\n      }, awake ? React.createElement(SceneView, _extends({}, rest, {\n        navigation: childNavigation,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 20\n        }\n      })) : null));\n    }\n  }], [{\n    key: \"getDerivedStateFromProps\",\n    value: function getDerivedStateFromProps(nextProps, prevState) {\n      if (nextProps.isFocused && !prevState.awake) {\n        return {\n          awake: true\n        };\n      } else {\n        return null;\n      }\n    }\n  }]);\n\n  return ResourceSavingSceneView;\n}(React.PureComponent);\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});\nexport default ResourceSavingSceneView;","map":{"version":3,"sources":["C:/Users/user/Desktop/MusicAppReact/node_modules/@react-navigation/native/dist/ResourceSavingSceneView.js"],"names":["React","SceneView","FAR_FAR_AWAY","ResourceSavingSceneView","props","_mustAlwaysBeVisible","animationEnabled","swipeEnabled","state","awake","lazy","isFocused","childNavigation","removeClippedSubviews","rest","styles","container","Platform","OS","innerAttached","innerDetached","nextProps","prevState","PureComponent","StyleSheet","create","flex","overflow","top"],"mappings":";;;;;;;;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,SAAT,QAA0B,wBAA1B;AAEA,IAAMC,YAAY,GAAG,IAArB;;IAEMC,uB;;;;;AASJ,mCAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB;;AADiB,UAwBnBC,oBAxBmB,GAwBI,YAAM;AAC3B,aAAO,MAAKD,KAAL,CAAWE,gBAAX,IAA+B,MAAKF,KAAL,CAAWG,YAAjD;AACD,KA1BkB;;AAGjB,UAAKC,KAAL,GAAa;AACXC,MAAAA,KAAK,EAAEL,KAAK,CAACM,IAAN,GAAaN,KAAK,CAACO,SAAnB,GAA+B;AAD3B,KAAb;AAHiB;AAMlB;;;;WAED,kBAAS;AACP,UAAQF,KAAR,GAAkB,KAAKD,KAAvB,CAAQC,KAAR;;AACA,wBAKI,KAAKL,KALT;AAAA,UACEO,SADF,eACEA,SADF;AAAA,UAEEC,eAFF,eAEEA,eAFF;AAAA,UAGEC,qBAHF,eAGEA,qBAHF;AAAA,UAIKC,IAJL;;AAOA,aAAO,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAEC,MAAM,CAACC,SAApB;AAA+B,QAAA,WAAW,EAAE,KAA5C;AAAmD,QAAA,qBAAqB,EAAEC,QAAQ,CAACC,EAAT,KAAgB,SAAhB,GAA4BL,qBAA5B,GAAoD,CAACF,SAAD,IAAcE,qBAA5I;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,KAAKR,oBAAL,MAA+BM,SAA/B,GAA2CI,MAAM,CAACI,aAAlD,GAAkEJ,MAAM,CAACK,aAAtF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGX,KAAK,GAAG,oBAAC,SAAD,eAAeK,IAAf;AAAqB,QAAA,UAAU,EAAEF,eAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAH,GAA0D,IADlE,CADG,CAAP;AAKD;;;WA9BD,kCAAgCS,SAAhC,EAA2CC,SAA3C,EAAsD;AACpD,UAAID,SAAS,CAACV,SAAV,IAAuB,CAACW,SAAS,CAACb,KAAtC,EAA6C;AAC3C,eAAO;AAAEA,UAAAA,KAAK,EAAE;AAAT,SAAP;AACD,OAFD,MAEO;AACL,eAAO,IAAP;AACD;AACF;;;;EAPmCT,KAAK,CAACuB,a;;AAsC5C,IAAMR,MAAM,GAAGS,UAAU,CAACC,MAAX,CAAkB;AAC/BT,EAAAA,SAAS,EAAE;AACTU,IAAAA,IAAI,EAAE,CADG;AAETC,IAAAA,QAAQ,EAAE;AAFD,GADoB;AAK/BR,EAAAA,aAAa,EAAE;AACbO,IAAAA,IAAI,EAAE;AADO,GALgB;AAQ/BN,EAAAA,aAAa,EAAE;AACbM,IAAAA,IAAI,EAAE,CADO;AAEbE,IAAAA,GAAG,EAAE1B;AAFQ;AARgB,CAAlB,CAAf;AAcA,eAAeC,uBAAf","sourcesContent":["import React from 'react';\nimport { Platform, StyleSheet, View } from 'react-native';\nimport { SceneView } from '@react-navigation/core';\n\nconst FAR_FAR_AWAY = 3000; // this should be big enough to move the whole view out of its container\n\nclass ResourceSavingSceneView extends React.PureComponent {\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.isFocused && !prevState.awake) {\n      return { awake: true };\n    } else {\n      return null;\n    }\n  }\n\n  constructor(props) {\n    super();\n\n    this.state = {\n      awake: props.lazy ? props.isFocused : true\n    };\n  }\n\n  render() {\n    const { awake } = this.state;\n    const {\n      isFocused,\n      childNavigation,\n      removeClippedSubviews,\n      ...rest\n    } = this.props;\n\n    return <View style={styles.container} collapsable={false} removeClippedSubviews={Platform.OS === 'android' ? removeClippedSubviews : !isFocused && removeClippedSubviews}>\n        <View style={this._mustAlwaysBeVisible() || isFocused ? styles.innerAttached : styles.innerDetached}>\n          {awake ? <SceneView {...rest} navigation={childNavigation} /> : null}\n        </View>\n      </View>;\n  }\n\n  _mustAlwaysBeVisible = () => {\n    return this.props.animationEnabled || this.props.swipeEnabled;\n  };\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    overflow: 'hidden'\n  },\n  innerAttached: {\n    flex: 1\n  },\n  innerDetached: {\n    flex: 1,\n    top: FAR_FAR_AWAY\n  }\n});\n\nexport default ResourceSavingSceneView;"]},"metadata":{},"sourceType":"module"}